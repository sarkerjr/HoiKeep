generator client {
  provider                  = "prisma-client-js"
  previewFeatures           = ["fieldReference"]
  binaryTargets             = ["native"]
  uncheckedRelationalInputs = "true"
  uncheckedScalarInputs     = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Halls {
  id          String        @id @default(uuid())
  name        String        @unique
  nameTag     String        @unique
  type        Gender
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  // ------------------------------
  authorities Authorities[]
  staffs      Staffs[]
  operators   Operators[]
  Students    Students[]
  Notices     Notices[]
  Rooms       Rooms[]
}

model Departments {
  id          String        @id @default(uuid())
  name        String        @unique
  nameTag     String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  // ------------------------------
  authorities Authorities[]
  Students    Students[]
}

model Notices {
  id            String        @id @default(uuid())
  title         String
  description   String
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  hallsId       String
  staffsId      String?
  authoritiesId String?
  // ------------------------------
  NoticeFiles   NoticeFiles[]
  halls         Halls         @relation(fields: [hallsId], references: [id])
  Staffs        Staffs?       @relation(fields: [staffsId], references: [id])
  Authorities   Authorities?  @relation(fields: [authoritiesId], references: [id])
}

model NoticeFiles {
  id        String  @id @default(uuid())
  url       String
  noticesId String
  notices   Notices @relation(fields: [noticesId], references: [id])
}

model Authorities {
  id               String            @id @default(uuid())
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  positionsId      String
  hallsId          String?
  departmentsId    String?
  // ------------------------------
  authorityDetails AuthorityDetails?
  halls            Halls?            @relation(fields: [hallsId], references: [id])
  departments      Departments?      @relation(fields: [departmentsId], references: [id])
  Position         Positions         @relation(fields: [positionsId], references: [id])
  notices          Notices[]
}

model AuthorityDetails {
  id            String      @id @default(uuid())
  name          String
  email         String      @unique
  designation   String
  joinedAt      DateTime?
  leftAt        DateTime?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  authoritiesId String      @unique
  // ------------------------------
  authorities   Authorities @relation(fields: [authoritiesId], references: [id], onDelete: Cascade)
}

model Staffs {
  id           String        @id @default(uuid())
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  hallsId      String?
  positionsId  String
  // ------------------------------
  staffDetails StaffDetails?
  halls        Halls?        @relation(fields: [hallsId], references: [id])
  Positions    Positions     @relation(fields: [positionsId], references: [id])
  notices      Notices[]
}

model StaffDetails {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  joinedAt  DateTime?
  leftAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  staffsId  String    @unique
  // ------------------------------
  staffs    Staffs    @relation(fields: [staffsId], references: [id])
}

model Operators {
  id              String           @id @default(uuid())
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  positionsId     String
  hallsId         String?
  // ------------------------------
  operatorDetails OperatorDetails?
  halls           Halls?           @relation(fields: [hallsId], references: [id])
  Positions       Positions        @relation(fields: [positionsId], references: [id])
}

model OperatorDetails {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  joinedAt    DateTime?
  leftAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  operatorsId String    @unique
  // ------------------------------
  opearators  Operators @relation(fields: [operatorsId], references: [id])
}

model Positions {
  id          String           @id @default(uuid())
  name        String
  category    PositionCategory
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  // ------------------------------
  Authorities Authorities[]
  Staffs      Staffs[]
  Operators   Operators[]
}

model Students {
  id              String           @id @default(uuid())
  hallsId         String
  departmentsId   String
  // ------------------------------
  studentProfiles StudentProfiles?
  halls           Halls            @relation(fields: [hallsId], references: [id])
  departments     Departments      @relation(fields: [departmentsId], references: [id])
  accommodations  Accommodations[]
}

model StudentProfiles {
  id            String         @id @default(uuid())
  name          String
  email         String
  studentNo     String         @unique
  session       String
  semester      Int?
  year          Int?
  admissionDate DateTime?
  studentId     String         @unique
  degreesId     String
  // ------------------------------
  students      Students       @relation(fields: [studentId], references: [id])
  studentImages StudentImages?
  degrees       Degrees        @relation(fields: [degreesId], references: [id])

  @@unique([email, degreesId])
}

model StudentImages {
  id              String          @id @default(uuid())
  url             String?
  studentId       String          @unique
  // ------------------------------
  studentProfiles StudentProfiles @relation(fields: [studentId], references: [id])
}

model Degrees {
  id              String            @id @default(uuid())
  name            String            @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  // ------------------------------
  studentProfiles StudentProfiles[]
}

model Rooms {
  id           String  @id @default(uuid())
  no           String  @unique
  seatQuantity Int
  hallsId      String
  // ------------------------------
  halls        Halls   @relation(fields: [hallsId], references: [id])
  Seats        Seats[]
}

model Seats {
  id             String           @id @default(uuid())
  no             String
  isAvailable    Boolean          @default(true)
  roomsId        String
  // ------------------------------
  rooms          Rooms            @relation(fields: [roomsId], references: [id])
  accommodations Accommodations[]

  @@unique([no, roomsId])
}

model Accommodations {
  id         String   @id @default(uuid())
  isActive   Boolean  @default(true)
  studentsId String
  seatsId    String
  // ------------------------------
  seats      Seats    @relation(fields: [seatsId], references: [id])
  students   Students @relation(fields: [studentsId], references: [id])
}

model Fees {
  id     String @id @default(uuid())
  amount Int
}

model Bills {
  id     String  @id @default(uuid())
  amount Int
  paid   Boolean
}

model Transactions {
  id     String  @id @default(uuid())
  amount Int
  paid   Boolean
}

enum Gender {
  MALE
  FEMALE
}

enum PositionCategory {
  AUTHORITY
  STAFF
  OPERATOR
}
