generator client {
  provider                  = "prisma-client-js"
  binaryTargets             = ["native"]
  uncheckedRelationalInputs = "true"
  uncheckedScalarInputs     = "true"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id            String       @id @default(uuid())
  email         String       @unique
  password      String
  type          UserType
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  authoritiesId String?      @unique
  staffsId      String?      @unique
  operatorsId   String?      @unique
  studentsId    String?      @unique
  // ------------------------------
  authorities   Authorities? @relation(fields: [authoritiesId], references: [id])
  staffs        Staffs?      @relation(fields: [staffsId], references: [id])
  operators     Operators?   @relation(fields: [operatorsId], references: [id])
  students      Students?    @relation(fields: [studentsId], references: [id])
}

model Halls {
  id          String        @id @default(uuid())
  name        String        @unique
  nameTag     String        @unique
  type        Gender
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  // ------------------------------
  authorities Authorities[]
  staffs      Staffs[]
  operators   Operators[]
  students    Students[]
  notices     Notices[]
  rooms       Rooms[]
}

model Departments {
  id          String        @id @default(uuid())
  name        String        @unique
  nameTag     String        @unique
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  // ------------------------------
  authorities Authorities[]
  students    Students[]
}

model Notices {
  id            String        @id @default(uuid())
  title         String
  description   String
  isActive      Boolean       @default(true)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  hallsId       String
  staffsId      String?
  authoritiesId String?
  // ------------------------------
  noticeFiles   NoticeFiles[]
  halls         Halls         @relation(fields: [hallsId], references: [id])
  staffs        Staffs?       @relation(fields: [staffsId], references: [id])
  authorities   Authorities?  @relation(fields: [authoritiesId], references: [id])
}

model NoticeFiles {
  id        String  @id @default(uuid())
  url       String
  noticesId String
  notices   Notices @relation(fields: [noticesId], references: [id])
}

model Authorities {
  id               String            @id @default(uuid())
  isActive         Boolean           @default(true)
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  positionsId      String
  hallsId          String?
  departmentsId    String?
  // ------------------------------
  authorityDetails AuthorityDetails?
  users            Users?
  halls            Halls?            @relation(fields: [hallsId], references: [id])
  departments      Departments?      @relation(fields: [departmentsId], references: [id])
  positions        Positions         @relation(fields: [positionsId], references: [id])
  notices          Notices[]
}

model AuthorityDetails {
  id             String       @id @default(uuid())
  name           String
  email          String       @unique
  joinedAt       DateTime?
  leftAt         DateTime?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  authoritiesId  String       @unique
  designationsId String
  // ------------------------------
  authorities    Authorities  @relation(fields: [authoritiesId], references: [id], onDelete: Cascade)
  designations   Designations @relation(fields: [designationsId], references: [id])
}

model Staffs {
  id           String        @id @default(uuid())
  isActive     Boolean       @default(true)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  hallsId      String?
  positionsId  String
  // ------------------------------
  staffDetails StaffDetails?
  users        Users?
  halls        Halls?        @relation(fields: [hallsId], references: [id])
  positions    Positions     @relation(fields: [positionsId], references: [id])
  notices      Notices[]
}

model StaffDetails {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  joinedAt  DateTime?
  leftAt    DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  staffsId  String    @unique
  // ------------------------------
  staffs    Staffs    @relation(fields: [staffsId], references: [id])
}

model Operators {
  id              String           @id @default(uuid())
  isActive        Boolean          @default(true)
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  positionsId     String
  hallsId         String?
  // ------------------------------
  operatorDetails OperatorDetails?
  users           Users?
  halls           Halls?           @relation(fields: [hallsId], references: [id])
  positions       Positions        @relation(fields: [positionsId], references: [id])
}

model OperatorDetails {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  joinedAt    DateTime?
  leftAt      DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  operatorsId String    @unique
  // ------------------------------
  opearators  Operators @relation(fields: [operatorsId], references: [id])
}

model Designations {
  id               String             @id @default(uuid())
  name             String             @unique
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  // ------------------------------
  authorityDetails AuthorityDetails[]
}

model Positions {
  id          String           @id @default(uuid())
  name        String           @unique
  category    PositionCategory
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  // ------------------------------
  authorities Authorities[]
  staffs      Staffs[]
  operators   Operators[]
}

model Students {
  id              String           @id @default(uuid())
  hallsId         String?
  departmentsId   String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  // ------------------------------
  studentProfiles StudentProfiles?
  users           Users?
  halls           Halls?           @relation(fields: [hallsId], references: [id])
  departments     Departments      @relation(fields: [departmentsId], references: [id])
  accommodations  Accommodations[]
}

model StudentProfiles {
  id            String         @id @default(uuid())
  name          String
  email         String
  studentNo     String         @unique
  session       String
  semester      Int?
  year          Int?
  admissionDate DateTime?
  studentId     String         @unique
  degreesId     String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  // ------------------------------
  students      Students       @relation(fields: [studentId], references: [id])
  studentImages StudentImages?
  degrees       Degrees        @relation(fields: [degreesId], references: [id])

  @@unique([email, degreesId])
}

model StudentImages {
  id              String          @id @default(uuid())
  url             String?
  studentId       String          @unique
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  // ------------------------------
  studentProfiles StudentProfiles @relation(fields: [studentId], references: [id])
}

model Degrees {
  id              String            @id @default(uuid())
  name            String            @unique
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  // ------------------------------
  studentProfiles StudentProfiles[]
}

model Rooms {
  id           String   @id @default(uuid())
  no           String   @unique
  seatQuantity Int
  hallsId      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  // ------------------------------
  halls        Halls?   @relation(fields: [hallsId], references: [id])
  Seats        Seats[]
}

model Seats {
  id             String           @id @default(uuid())
  no             String
  isAvailable    Boolean          @default(true)
  roomsId        String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  // ------------------------------
  rooms          Rooms            @relation(fields: [roomsId], references: [id])
  accommodations Accommodations[]

  @@unique([no, roomsId])
}

model Accommodations {
  id          String              @id @default(uuid())
  isActive    Boolean             @default(true)
  status      AccommodationStatus
  joiningDate DateTime?
  leavingDate DateTime?
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  studentsId  String              @unique
  seatsId     String              @unique
  // ------------------------------
  seats       Seats               @relation(fields: [seatsId], references: [id])
  students    Students            @relation(fields: [studentsId], references: [id])
}

model Fees {
  id        String   @id @default(uuid())
  amount    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Bills {
  id        String   @id @default(uuid())
  amount    Int
  paid      Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transactions {
  id        String   @id @default(uuid())
  amount    Int
  paid      Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Gender {
  MALE
  FEMALE
}

enum PositionCategory {
  AUTHORITY
  STAFF
  OPERATOR
}

enum UserType {
  AUTHORITY
  STAFF
  OPERATOR
  STUDENT
}

enum AccommodationStatus {
  ALLOCATED
  UNALLOCATED
  ILLEGAL
}
